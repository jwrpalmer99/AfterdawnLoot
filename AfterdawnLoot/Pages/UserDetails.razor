@page "/userdetails"
@page "/userdetails/{UserID:int}"
@inherits UserDetailsListenerComponent 
@inject UserManager<IdentityUser> _UserManager
@inject RoleManager<IdentityRole> _RoleManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject AfterdawnDataServices dataservice

@using Microsoft.EntityFrameworkCore

<AuthorizeView>
    <Authorized>
        @if (recalc)
        {
            ReloadData();
            recalc = false;
        }
        <div class="container">
            <div class="row"><h3>Details for @Globals.player_char.Where(x => x.UserID == UserID).Select(z => z.Name).FirstOrDefault()</h3></div>

            <div class="row" height="50%" width="100%">
                <FullCalendar settings=@GetSettings() @ref="calendar" />
            </div>

        </div>
        <br />
    </Authorized>
    <NotAuthorized>
        <p>You are not authorized to view this page</p>
    </NotAuthorized>
</AuthorizeView>

@code
{
    [Inject]
    private IEventAggregator _eventAggregator { get; set; }

    [Parameter]
    public int UserID { get; set; }
    string ADMINISTRATION_ROLE = "Administrators";
    List<PlayerCharacters> playerCharacters = new List<PlayerCharacters>();
    List<Attendance> Attendances = new List<Attendance> { };
    static List<Raids> raids = new List<Raids> { };
    PlayerCharacters currentplayer;
    FullCalendar calendar;
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    private IEnumerable<Claim> _claims = Enumerable.Empty<Claim>();
    private List<LootResults> lootresults;
    private List<CharacterLoot> characterloot;
    public CalendarSourceFeed DefaultSourceFeed { get; set; }
    RenderFragment widget = null;

    System.Security.Claims.ClaimsPrincipal CurrentUser;
    protected override async Task OnInitializedAsync()
    {
        DefaultSourceFeed = new CalendarSourceFeed()
        {
            url = "/api/Events",
            method = "GET"
        };

        _eventAggregator.Subscribe(this);
        CurrentUser = (await authenticationStateTask).User;
        Task.Run(LoadData);
    }

    private async void ReloadData()
    {
        dataservice.dbContext = new AfterdawnDbContext(dataservice.dbContext.myoptions);
        Globals.global_raids = await dataservice.GetRaidsAsync(); ;
        Globals.global_loot = await dataservice.GetCharacterLootAsync();
        Globals.global_attendance = await dataservice.GetAttendanceAsync();
        Globals.player_char = await dataservice.GetPlayerCharactersAsync();
        Globals.global_lootresults = await dataservice.GetLootResultsAsync();
        Globals.global_pointadjustments = await dataservice.GetPointsAdjustmentAsync();
        calendar.CalendarRefetchEvents();
        recalc = false;
        InvokeAsync(() => StateHasChanged());
    }

    private async void LoadData()
    {
        widget = __builder =>
        {
        <BlazorFullCalendar.FullCalendar settings="@GetSettings()"></BlazorFullCalendar.FullCalendar>
        };
        this.InvokeAsync(() => StateHasChanged());
    }

    private  CalendarSettings GetSettings()
    {
        return new CalendarSettings()
        {
            plugins = new[] { CalendarPluginTypes.DayGrid },
            firstDay = 1,
            defaultView = "dayGridMonth",
            timeZone = "UTC",
            eventSources = new List<CalendarSourceFeed>() { DefaultSourceFeed }
        };
    }




    }
